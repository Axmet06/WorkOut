import React, { useState, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store';
import { setUsers, setJobs, setReports } from '../store/slices/adminSlice';
import { AdminUser, AdminJob, Report } from '../types';
import Navbar from '../components/Navbar';
import AdminDashboard from '../components/AdminDashboard';
import ModerationPanel from '../components/ModerationPanel';
import UserManagement from '../components/UserManagement';
import ReportsPanel from '../components/ReportsPanel';
import Footer from '../components/Footer';
import { useI18n } from '../contexts/I18nContext';
import './AdminPage.css';

const AdminPage: React.FC = () => {
  const dispatch = useDispatch();
  const { user, isAuthenticated } = useSelector((state: RootState) => state.auth);
  const [activeTab, setActiveTab] = useState('dashboard');
  const { t } = useI18n();

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
  const mockAdminUsers: AdminUser[] = [
    {
      id: '1',
      name: '–ê–∫–º–∞—Ç –ê–∫–º–∞—Ç–æ–≤ / Akmat Akmatov',
      email: 'akmat@example.com',
      role: 'client',
      isBlocked: false,
      registrationDate: '2024-01-01',
      lastActivity: '2024-01-15',
      totalJobs: 5,
      completedJobs: 3,
      rating: 4.5
    },
    {
      id: '2',
      name: '–ê–π–≥—É–ª—å –¢–æ–∫—Ç–æ—Å—É–Ω–æ–≤–∞ / Aigul Toktosunova',
      email: 'aigul@example.com',
      role: 'executor',
      isBlocked: false,
      registrationDate: '2024-01-02',
      lastActivity: '2024-01-14',
      totalJobs: 12,
      completedJobs: 10,
      rating: 4.8
    },
    {
      id: '3',
      name: '–ê–∑–∞–º–∞—Ç –ë–∞–∫–∏—Ä–æ–≤ / Azamat Bakirov',
      email: 'azamat@example.com',
      role: 'client',
      isBlocked: true,
      registrationDate: '2024-01-03',
      lastActivity: '2024-01-10',
      totalJobs: 2,
      completedJobs: 0,
      rating: 2.1
    }
  ];

  const mockAdminJobs: AdminJob[] = [
    {
      id: '1',
      title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞',
      description: '–ù—É–∂–µ–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω, –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM.',
      category: 'IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      price: 50000,
      currency: 'RUB',
      deadline: '2024-02-15',
      location: '–ú–æ—Å–∫–≤–∞',
      urgency: 'high',
      status: 'in_progress',
      clientId: '1',
      clientName: '–ê–∫–º–∞—Ç –ê–∫–º–∞—Ç–æ–≤ / Akmat Akmatov',
      createdAt: '2024-01-15',
      updatedAt: '2024-01-15',
      isBlocked: false,
      reportsCount: 0
    },
    {
      id: '2',
      title: '–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –∫–∞—Ñ–µ',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –°—Ç–∏–ª—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π.',
      category: '–î–∏–∑–∞–π–Ω',
      price: 15000,
      currency: 'RUB',
      deadline: '2024-02-20',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      urgency: 'medium',
      status: 'completed',
      clientId: '2',
      clientName: '–ê–π–≥—É–ª—å –¢–æ–∫—Ç–æ—Å—É–Ω–æ–≤–∞ / Aigul Toktosunova',
      createdAt: '2024-01-14',
      updatedAt: '2024-01-14',
      isBlocked: false,
      reportsCount: 0
    },
    {
      id: '3',
      title: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è –±–ª–æ–≥–∞',
      description: '–ù—É–∂–µ–Ω –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è 10 —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ç–µ–º—É "–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏".',
      category: '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥',
      price: 25000,
      currency: 'RUB',
      deadline: '2024-02-25',
      location: '–£–¥–∞–ª–µ–Ω–Ω–æ',
      urgency: 'low',
      status: 'open',
      clientId: '3',
      clientName: '–ê–∑–∞–º–∞—Ç –ë–∞–∫–∏—Ä–æ–≤ / Azamat Bakirov',
      createdAt: '2024-01-13',
      updatedAt: '2024-01-13',
      isBlocked: true,
      reportsCount: 2
    }
  ];

  const mockReports: Report[] = [
    {
      id: '1',
      jobId: '3',
      reporterId: '2',
      reporterName: '–ê–π–≥—É–ª—å –¢–æ–∫—Ç–æ—Å—É–Ω–æ–≤–∞ / Aigul Toktosunova',
      reason: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
      description: '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—ç—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –Ω–∞—Ä—É—à–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
      status: 'pending',
      createdAt: '2024-01-15T10:30:00Z'
    },
    {
      id: '2',
      jobId: '3',
      reporterId: '1',
      reporterName: '–ê–∫–º–∞—Ç –ê–∫–º–∞—Ç–æ–≤ / Akmat Akmatov',
      reason: '–°–ø–∞–º',
      description: '–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –∑–∞–¥–∞–Ω–∏–µ, —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑.',
      status: 'reviewed',
      createdAt: '2024-01-14T15:45:00Z',
      reviewedAt: '2024-01-15T09:00:00Z',
      reviewedBy: 'admin'
    }
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  const isAdmin = user?.role === 'admin' || user?.email === 'admin@example.com';

  useEffect(() => {
    if (isAuthenticated && isAdmin) {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      dispatch(setUsers(mockAdminUsers));
      dispatch(setJobs(mockAdminJobs));
      dispatch(setReports(mockReports));
    }
  }, [dispatch, isAuthenticated, isAdmin]);

  if (!isAuthenticated) {
    return (
      <div className="admin-page">
        <Navbar />
        <div className="not-authenticated">
          <div className="not-auth-content">
            <h1>{t('admin.accessDenied')}</h1>
            <p>{t('admin.loginRequired')}</p>
            <a href="/login" className="login-link">{t('admin.login')}</a>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (!isAdmin) {
    return (
      <div className="admin-page">
        <Navbar />
        <div className="not-authorized">
          <div className="not-auth-content">
            <h1>{t('admin.notAuthorized')}</h1>
            <p>{t('admin.noPermission')}</p>
            <a href="/" className="home-link">{t('admin.returnHome')}</a>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  const tabs = [
    { id: 'dashboard', label: t('admin.dashboard'), icon: 'üìä' },
    { id: 'moderation', label: t('admin.moderation'), icon: 'üìã' },
    { id: 'users', label: t('admin.userManagement'), icon: 'üë•' },
    { id: 'reports', label: t('admin.reports'), icon: '‚ö†Ô∏è' }
  ];

  const renderTabContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return <AdminDashboard />;
      case 'moderation':
        return <ModerationPanel />;
      case 'users':
        return <UserManagement />;
      case 'reports':
        return <ReportsPanel />;
      default:
        return <AdminDashboard />;
    }
  };

  return (
    <div className="admin-page">
      <Navbar />
      <div className="admin-container">
        <div className="admin-sidebar">
          <div className="admin-header">
            <h2>{t('admin.dashboard')}</h2>
            <p>{t('admin.welcome')}, {user?.name}</p>
          </div>
          
          <nav className="admin-nav">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                className={`nav-item ${activeTab === tab.id ? 'active' : ''}`}
                onClick={() => setActiveTab(tab.id)}
              >
                <span className="nav-icon">{tab.icon}</span>
                <span className="nav-label">{tab.label}</span>
              </button>
            ))}
          </nav>
        </div>

        <div className="admin-content">
          {renderTabContent()}
        </div>
      </div>
      <Footer />
    </div>
  );
};

export default AdminPage;