import React, { useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store';
// import { addMessage } from '../store/slices/chatSlice'; // –£–¥–∞–ª–µ–Ω–æ –∏–∑ chatSlice
import { Message } from '../types';
import MessageItem from './MessageItem';
import MessageInput from './MessageInput';
import { useI18n } from '../contexts/I18nContext';
import './ChatWindow.css';

interface ChatWindowProps {
  conversationId: string;
}

const ChatWindow: React.FC<ChatWindowProps> = ({ conversationId }) => {
  const dispatch = useDispatch();
  const { currentConversation } = useSelector((state: RootState) => state.chat);
  const { user } = useSelector((state: RootState) => state.auth);
  const { formatName } = useI18n();
  const messagesEndRef = useRef<HTMLDivElement>(null);

  // –ú–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const mockMessages: Message[] = [
    {
      id: 'msg_1',
      senderId: 'client1',
      senderName: '–ê–∫–º–∞—Ç –ê–∫–º–∞—Ç–æ–≤ / Akmat Akmatov',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ª–µ–Ω–¥–∏–Ω–≥–∞.',
      timestamp: '2024-01-15T10:00:00Z',
      isRead: true
    },
    {
      id: 'msg_2',
      senderId: 'executor1',
      senderName: '–ê–π–¥–∞—Ä –ù—É—Ä–º–∞—Ç–æ–≤ / Aidar Nurmato',
      content: '–ü—Ä–∏–≤–µ—Ç! –î–∞, —è –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å—Å—è –∑–∞ –≤–∞—à –ø—Ä–æ–µ–∫—Ç. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö.',
      timestamp: '2024-01-15T10:05:00Z',
      isRead: true
    },
    {
      id: 'msg_3',
      senderId: 'client1',
      senderName: '–ê–∫–º–∞—Ç –ê–∫–º–∞—Ç–æ–≤ / Akmat Akmatov',
      content: '–ù—É–∂–µ–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω, –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM.',
      timestamp: '2024-01-15T10:10:00Z',
      isRead: true
    },
    {
      id: 'msg_4',
      senderId: 'executor1',
      senderName: '–ê–π–¥–∞—Ä –ù—É—Ä–º–∞—Ç–æ–≤ / Aidar Nurmato',
      content: '–ü–æ–Ω—è–ª. –ö–∞–∫–æ–π —É –≤–∞—Å –±—é–¥–∂–µ—Ç –∏ —Å—Ä–æ–∫–∏?',
      timestamp: '2024-01-15T10:15:00Z',
      isRead: false
    }
  ];

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if (conversationId) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
      // dispatch(setMessages(mockMessages));
    }
  }, [conversationId, dispatch]);

  useEffect(() => {
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    scrollToBottom();
  }, [mockMessages]);

  useEffect(() => {
    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
    if (currentConversation && user) {
      // dispatch(markMessagesAsRead(currentConversation.id)); // –£–¥–∞–ª–µ–Ω–æ –∏–∑ chatSlice
    }
  }, [currentConversation, user, dispatch]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = (content: string, attachments?: File[]) => {
    if (!user || !currentConversation) return;

    const newMessage: Message = {
      id: `msg_${Date.now()}`,
      senderId: user.id,
      senderName: user.name,
      content,
      timestamp: new Date().toISOString(),
      isRead: false
    };

    // dispatch(addMessage(newMessage)); // –£–¥–∞–ª–µ–Ω–æ –∏–∑ chatSlice

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ 2-3 —Å–µ–∫—É–Ω–¥—ã
    if (Math.random() > 0.5) {
      setTimeout(() => {
        const replyMessage: Message = {
          id: `msg_${Date.now()}_reply`,
          senderId: currentConversation.clientId === user.id ? currentConversation.executorId : currentConversation.clientId,
          senderName: formatName(currentConversation.clientId === user.id ? currentConversation.executorName : currentConversation.clientName),
          content: '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ! –Ø –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          timestamp: new Date().toISOString(),
          isRead: false
        };
        // dispatch(addMessage(replyMessage)); // –£–¥–∞–ª–µ–Ω–æ –∏–∑ chatSlice
      }, 2000 + Math.random() * 1000);
    }
  };

  const getOtherParticipant = () => {
    if (!currentConversation || !user) return null;
    
    return {
      id: currentConversation.clientId === user.id ? currentConversation.executorId : currentConversation.clientId,
      name: formatName(currentConversation.clientId === user.id ? currentConversation.executorName : currentConversation.clientName)
    };
  };

  const otherParticipant = getOtherParticipant();

  if (!currentConversation) {
    return (
      <div className="chat-window">
        <div className="no-conversation">
          <div className="no-conversation-icon">üí¨</div>
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä</h3>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ª–æ–≥ –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ</p>
        </div>
      </div>
    );
  }

  return (
    <div className="chat-window">
      <div className="chat-header">
        <div className="chat-participant">
          <div className="participant-avatar">
            {otherParticipant?.name.charAt(0).toUpperCase()}
          </div>
          <div className="participant-info">
            <h3 className="participant-name">{otherParticipant?.name}</h3>
            <span className="participant-status">–≤ —Å–µ—Ç–∏</span>
          </div>
        </div>
        
        <div className="chat-actions">
          <button className="action-btn" title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è">
            ‚ÑπÔ∏è
          </button>
          <button className="action-btn" title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏">
            ‚öôÔ∏è
          </button>
        </div>
      </div>

      <div className="chat-messages">
        {mockMessages.length === 0 ? (
          <div className="no-messages">
            <div className="no-messages-icon">üìù</div>
            <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å {otherParticipant?.name}</p>
          </div>
        ) : (
          mockMessages.map((message, index) => {
            const isOwn = message.senderId === user?.id;
            const showAvatar = index === 0 || mockMessages[index - 1].senderId !== message.senderId;
            
            return (
              <MessageItem
                key={message.id}
                message={message}
                isOwn={isOwn}
                showAvatar={showAvatar}
              />
            );
          })
        )}
        <div ref={messagesEndRef} />
      </div>

      <MessageInput
        onSendMessage={handleSendMessage}
        placeholder={`–ù–∞–ø–∏—Å–∞—Ç—å ${otherParticipant?.name}...`}
      />
    </div>
  );
};

export default ChatWindow;