import React, { useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store';
import { updateUser } from '../store/slices/authSlice';
import './ProfileSettingsTab.css';

const ProfileSettingsTab: React.FC = () => {
  const dispatch = useDispatch();
  const { user } = useSelector((state: RootState) => state.auth);
  const [activeSection, setActiveSection] = useState<'profile' | 'password' | 'notifications'>('profile');
  
  const [profileData, setProfileData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: '',
    bio: '',
    location: '',
    website: ''
  });

  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const [notifications, setNotifications] = useState({
    emailNotifications: true,
    pushNotifications: true,
    smsNotifications: false,
    jobAlerts: true,
    messageAlerts: true,
    weeklyDigest: true
  });

  const [errors, setErrors] = useState<{[key: string]: string}>({});

  const handleProfileChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setProfileData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPasswordData(prev => ({
      ...prev,
      [name]: value
    }));
    
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const handleNotificationChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, checked } = e.target;
    setNotifications(prev => ({
      ...prev,
      [name]: checked
    }));
  };

  const validateProfile = () => {
    const newErrors: {[key: string]: string} = {};

    if (!profileData.name.trim()) {
      newErrors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!profileData.email.trim()) {
      newErrors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(profileData.email)) {
      newErrors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const validatePassword = () => {
    const newErrors: {[key: string]: string} = {};

    if (!passwordData.currentPassword) {
      newErrors.currentPassword = '–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    if (!passwordData.newPassword) {
      newErrors.newPassword = '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (passwordData.newPassword.length < 6) {
      newErrors.newPassword = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    if (passwordData.newPassword !== passwordData.confirmPassword) {
      newErrors.confirmPassword = '–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSaveProfile = () => {
    if (validateProfile()) {
      dispatch(updateUser(profileData));
      alert('–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
  };

  const handleChangePassword = () => {
    if (validatePassword()) {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
      alert('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
      setPasswordData({
        currentPassword: '',
        newPassword: '',
        confirmPassword: ''
      });
    }
  };

  const handleSaveNotifications = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
  };

  return (
    <div className="profile-settings-tab">
      <div className="settings-header">
        <h2>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</h2>
        <div className="settings-nav">
          <button
            className={`nav-btn ${activeSection === 'profile' ? 'active' : ''}`}
            onClick={() => setActiveSection('profile')}
          >
            üë§ –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          </button>
          <button
            className={`nav-btn ${activeSection === 'password' ? 'active' : ''}`}
            onClick={() => setActiveSection('password')}
          >
            üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
          </button>
          <button
            className={`nav-btn ${activeSection === 'notifications' ? 'active' : ''}`}
            onClick={() => setActiveSection('notifications')}
          >
            üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </button>
        </div>
      </div>

      <div className="settings-content">
        {activeSection === 'profile' && (
          <div className="settings-section">
            <h3>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
            <div className="form-grid">
              <div className="form-group">
                <label htmlFor="name">–ò–º—è *</label>
                <input
                  type="text"
                  id="name"
                  name="name"
                  value={profileData.name}
                  onChange={handleProfileChange}
                  className={errors.name ? 'error' : ''}
                />
                {errors.name && <span className="field-error">{errors.name}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="email">Email *</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={profileData.email}
                  onChange={handleProfileChange}
                  className={errors.email ? 'error' : ''}
                />
                {errors.email && <span className="field-error">{errors.email}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={profileData.phone}
                  onChange={handleProfileChange}
                  placeholder="+7 (999) 123-45-67"
                />
              </div>

              <div className="form-group">
                <label htmlFor="location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</label>
                <input
                  type="text"
                  id="location"
                  name="location"
                  value={profileData.location}
                  onChange={handleProfileChange}
                  placeholder="–ì–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞"
                />
              </div>

              <div className="form-group full-width">
                <label htmlFor="website">–í–µ–±-—Å–∞–π—Ç</label>
                <input
                  type="url"
                  id="website"
                  name="website"
                  value={profileData.website}
                  onChange={handleProfileChange}
                  placeholder="https://example.com"
                />
              </div>

              <div className="form-group full-width">
                <label htmlFor="bio">–û —Å–µ–±–µ</label>
                <textarea
                  id="bio"
                  name="bio"
                  value={profileData.bio}
                  onChange={handleProfileChange}
                  rows={4}
                  placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ, —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ –æ–ø—ã—Ç–µ..."
                />
              </div>
            </div>

            <button className="save-btn" onClick={handleSaveProfile}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            </button>
          </div>
        )}

        {activeSection === 'password' && (
          <div className="settings-section">
            <h3>–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è</h3>
            <div className="form-grid">
              <div className="form-group">
                <label htmlFor="currentPassword">–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å *</label>
                <input
                  type="password"
                  id="currentPassword"
                  name="currentPassword"
                  value={passwordData.currentPassword}
                  onChange={handlePasswordChange}
                  className={errors.currentPassword ? 'error' : ''}
                />
                {errors.currentPassword && <span className="field-error">{errors.currentPassword}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="newPassword">–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å *</label>
                <input
                  type="password"
                  id="newPassword"
                  name="newPassword"
                  value={passwordData.newPassword}
                  onChange={handlePasswordChange}
                  className={errors.newPassword ? 'error' : ''}
                />
                {errors.newPassword && <span className="field-error">{errors.newPassword}</span>}
              </div>

              <div className="form-group">
                <label htmlFor="confirmPassword">–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å *</label>
                <input
                  type="password"
                  id="confirmPassword"
                  name="confirmPassword"
                  value={passwordData.confirmPassword}
                  onChange={handlePasswordChange}
                  className={errors.confirmPassword ? 'error' : ''}
                />
                {errors.confirmPassword && <span className="field-error">{errors.confirmPassword}</span>}
              </div>
            </div>

            <button className="save-btn" onClick={handleChangePassword}>
              –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </button>
          </div>
        )}

        {activeSection === 'notifications' && (
          <div className="settings-section">
            <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h3>
            <div className="notifications-list">
              <div className="notification-item">
                <div className="notification-info">
                  <h4>Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                  <p>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email</p>
                </div>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    name="emailNotifications"
                    checked={notifications.emailNotifications}
                    onChange={handleNotificationChange}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="notification-item">
                <div className="notification-info">
                  <h4>Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                  <p>–ü–æ–ª—É—á–∞—Ç—å push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ</p>
                </div>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    name="pushNotifications"
                    checked={notifications.pushNotifications}
                    onChange={handleNotificationChange}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="notification-item">
                <div className="notification-info">
                  <h4>SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h4>
                  <p>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ SMS</p>
                </div>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    name="smsNotifications"
                    checked={notifications.smsNotifications}
                    onChange={handleNotificationChange}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="notification-item">
                <div className="notification-info">
                  <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</h4>
                  <p>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö</p>
                </div>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    name="jobAlerts"
                    checked={notifications.jobAlerts}
                    onChange={handleNotificationChange}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="notification-item">
                <div className="notification-info">
                  <h4>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</h4>
                  <p>–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö</p>
                </div>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    name="messageAlerts"
                    checked={notifications.messageAlerts}
                    onChange={handleNotificationChange}
                  />
                  <span className="slider"></span>
                </label>
              </div>

              <div className="notification-item">
                <div className="notification-info">
                  <h4>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞</h4>
                  <p>–ü–æ–ª—É—á–∞—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</p>
                </div>
                <label className="toggle-switch">
                  <input
                    type="checkbox"
                    name="weeklyDigest"
                    checked={notifications.weeklyDigest}
                    onChange={handleNotificationChange}
                  />
                  <span className="slider"></span>
                </label>
              </div>
            </div>

            <button className="save-btn" onClick={handleSaveNotifications}>
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ProfileSettingsTab;

