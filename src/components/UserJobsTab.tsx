import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { RootState } from '../store';
import { setUserJobs } from '../store/slices/jobsSlice';
import { Job } from '../types';
import UserJobCard from './UserJobCard';
import './UserJobsTab.css';

const UserJobsTab: React.FC = () => {
  const dispatch = useDispatch();
  const { user } = useSelector((state: RootState) => state.auth);
  const { userJobs } = useSelector((state: RootState) => state.jobs);
  const [filter, setFilter] = useState<'all' | 'open' | 'in_progress' | 'completed'>('all');

  // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–¥–∞–Ω–∏–π
  const mockUserJobs: Job[] = [
    {
      id: '1',
      title: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–Ω–¥–∏–Ω–≥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–∞',
      description: '–ù—É–∂–µ–Ω —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ª–µ–Ω–¥–∏–Ω–≥ –¥–ª—è IT-—Å—Ç–∞—Ä—Ç–∞–ø–∞. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω, –±—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å CRM.',
      category: 'IT –∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      price: 50000,
      currency: 'RUB',
      deadline: '2024-02-15',
      location: '–ú–æ—Å–∫–≤–∞',
      urgency: 'high',
      status: 'in_progress',
      clientId: user?.id || '1',
      clientName: user?.name || '–í—ã',
      createdAt: '2024-01-15',
      updatedAt: '2024-01-15'
    },
    {
      id: '2',
      title: '–î–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –∫–∞—Ñ–µ',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞. –°—Ç–∏–ª—å: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π.',
      category: '–î–∏–∑–∞–π–Ω',
      price: 15000,
      currency: 'RUB',
      deadline: '2024-02-20',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      urgency: 'medium',
      status: 'completed',
      clientId: user?.id || '1',
      clientName: user?.name || '–í—ã',
      createdAt: '2024-01-14',
      updatedAt: '2024-01-14'
    },
    {
      id: '3',
      title: '–ù–∞–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –¥–ª—è –±–ª–æ–≥–∞',
      description: '–ù—É–∂–µ–Ω –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è 10 —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ç–µ–º—É "–ó–¥–æ—Ä–æ–≤—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏".',
      category: '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥',
      price: 25000,
      currency: 'RUB',
      deadline: '2024-02-25',
      location: '–£–¥–∞–ª–µ–Ω–Ω–æ',
      urgency: 'low',
      status: 'open',
      clientId: user?.id || '1',
      clientName: user?.name || '–í—ã',
      createdAt: '2024-01-13',
      updatedAt: '2024-01-13'
    }
  ];

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è
    dispatch(setUserJobs(mockUserJobs));
  }, [dispatch]);

  const filteredJobs = userJobs.filter(job => {
    if (filter === 'all') return true;
    return job.status === filter;
  });

  const getStatusCount = (status: string) => {
    return userJobs.filter(job => job.status === status).length;
  };

  const handleJobAction = (jobId: string, action: string) => {
    console.log(`–î–µ–π—Å—Ç–≤–∏–µ ${action} –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${jobId}`);
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
  };

  return (
    <div className="user-jobs-tab">
      <div className="jobs-header">
        <h2>–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—è</h2>
        <div className="jobs-stats">
          <div className="stat-item">
            <span className="stat-number">{getStatusCount('open')}</span>
            <span className="stat-label">–û—Ç–∫—Ä—ã—Ç—ã–µ</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{getStatusCount('in_progress')}</span>
            <span className="stat-label">–í —Ä–∞–±–æ—Ç–µ</span>
          </div>
          <div className="stat-item">
            <span className="stat-number">{getStatusCount('completed')}</span>
            <span className="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</span>
          </div>
        </div>
      </div>

      <div className="jobs-filters">
        <button
          className={`filter-btn ${filter === 'all' ? 'active' : ''}`}
          onClick={() => setFilter('all')}
        >
          –í—Å–µ ({userJobs.length})
        </button>
        <button
          className={`filter-btn ${filter === 'open' ? 'active' : ''}`}
          onClick={() => setFilter('open')}
        >
          –û—Ç–∫—Ä—ã—Ç—ã–µ ({getStatusCount('open')})
        </button>
        <button
          className={`filter-btn ${filter === 'in_progress' ? 'active' : ''}`}
          onClick={() => setFilter('in_progress')}
        >
          –í —Ä–∞–±–æ—Ç–µ ({getStatusCount('in_progress')})
        </button>
        <button
          className={`filter-btn ${filter === 'completed' ? 'active' : ''}`}
          onClick={() => setFilter('completed')}
        >
          –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ({getStatusCount('completed')})
        </button>
      </div>

      <div className="jobs-list">
        {filteredJobs.length === 0 ? (
          <div className="empty-state">
            <div className="empty-icon">üìã</div>
            <h3>–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
            <p>
              {filter === 'all' 
                ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π' 
                : `–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${filter}"`
              }
            </p>
            {user?.role === 'client' && (
              <button className="create-job-btn">
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
              </button>
            )}
          </div>
        ) : (
          filteredJobs.map(job => (
            <UserJobCard
              key={job.id}
              job={job}
              onAction={handleJobAction}
            />
          ))
        )}
      </div>
    </div>
  );
};

export default UserJobsTab;

